var search_data = {"index":{"searchIndex":["maze","mazedesigner","mazesolver","node","add_adjacent()","clear()","clear_all()","connect()","connect_above()","connect_all_nodes()","connect_below()","connect_left()","connect_right()","construct_default_maze_string()","construct_node_matrix()","convert_array_for_load()","create_maze_string()","design()","display()","find_next()","find_node_adjacency()","knock_down_wall()","load()","maze_format()","new()","new()","new()","new()","random_depth_first_search()","redesign()","reset_maze()","solve()","solve()","string_to_maze_array()","to_s()","trace()","trace()","visit()","readme"],"longSearchIndex":["maze","mazedesigner","mazesolver","node","node#add_adjacent()","node#clear()","mazesolver#clear_all()","maze#connect()","mazedesigner#connect_above()","mazedesigner#connect_all_nodes()","mazedesigner#connect_below()","mazedesigner#connect_left()","mazedesigner#connect_right()","maze#construct_default_maze_string()","maze#construct_node_matrix()","mazedesigner#convert_array_for_load()","mazedesigner#create_maze_string()","mazedesigner#design()","maze#display()","mazedesigner#find_next()","maze#find_node_adjacency()","mazedesigner#knock_down_wall()","maze#load()","maze#maze_format()","maze::new()","mazedesigner::new()","mazesolver::new()","node::new()","mazedesigner#random_depth_first_search()","maze#redesign()","maze#reset_maze()","maze#solve()","mazesolver#solve()","maze#string_to_maze_array()","node#to_s()","maze#trace()","mazesolver#trace()","node#visit()",""],"info":[["Maze","","Maze.html","",""],["MazeDesigner","","MazeDesigner.html","",""],["MazeSolver","","MazeSolver.html","",""],["Node","","Node.html","",""],["add_adjacent","Node","Node.html#method-i-add_adjacent","(node)","<p>Adds the node argument to the array of adjacent nodes\n"],["clear","Node","Node.html#method-i-clear","()","<p>Resets the node to nil predecessor, false on visited, and a space for a\nstring\n"],["clear_all","MazeSolver","MazeSolver.html#method-i-clear_all","()","<p>Clears each node of its &#39;visited&#39; status and predecessor\n"],["connect","Maze","Maze.html#method-i-connect","(node1, node2)","<p>If it has been determined that there is a path between two adjacent nodes\nthey are linked\n"],["connect_above","MazeDesigner","MazeDesigner.html#method-i-connect_above","(node)","<p>Connects node to node above\n"],["connect_all_nodes","MazeDesigner","MazeDesigner.html#method-i-connect_all_nodes","()","<p>Connects all nodes to start to allow for DFS\n"],["connect_below","MazeDesigner","MazeDesigner.html#method-i-connect_below","(node)","<p>Connects node to node below\n"],["connect_left","MazeDesigner","MazeDesigner.html#method-i-connect_left","(node)","<p>Connects node to node on left\n"],["connect_right","MazeDesigner","MazeDesigner.html#method-i-connect_right","(node)","<p>Connects node to node on right\n"],["construct_default_maze_string","Maze","Maze.html#method-i-construct_default_maze_string","()","<p>Constructs the default look of the maze, with &#39;+-&#39; for horizonal\nwalls and &#39;|&#39; for vertical …\n"],["construct_node_matrix","Maze","Maze.html#method-i-construct_node_matrix","()","<p>Using the string from load this method builds a matrix of Nodes\nrepresenting cells and superimposes it …\n"],["convert_array_for_load","MazeDesigner","MazeDesigner.html#method-i-convert_array_for_load","()","<p>Converst the array of the maze to 1&#39;s and 0&#39;s\n"],["create_maze_string","MazeDesigner","MazeDesigner.html#method-i-create_maze_string","()","<p>Creates the final maze string for loading\n"],["design","MazeDesigner","MazeDesigner.html#method-i-design","()","<p>Essentially resets maze, then uses a random DFS to construct new maze, then\nloads new maze\n"],["display","Maze","Maze.html#method-i-display","()","<p>Displays the maze\n"],["find_next","MazeDesigner","MazeDesigner.html#method-i-find_next","(node)","<p>Determines if there is another node in the adjacency list and if so returns\na random one\n"],["find_node_adjacency","Maze","Maze.html#method-i-find_node_adjacency","()","<p>Goes through entire maze and determines which cells are connected\n"],["knock_down_wall","MazeDesigner","MazeDesigner.html#method-i-knock_down_wall","(node1, node2)","<p>Removes a wall between cells\n"],["load","Maze","Maze.html#method-i-load","(arg)","<p>Loads a string of 1s and 0s into the maze_array, then calls the methods to\nconstruct the appropriate …\n"],["maze_format","Maze","Maze.html#method-i-maze_format","(arg)","<p>Takes walls out of the predefined maze (Which has four walls on every cell)\n"],["new","Maze","Maze.html#method-c-new","(n,m)","<p>Initializes the maze with size allowing for walls around all\n&#39;chambers&#39;\n"],["new","MazeDesigner","MazeDesigner.html#method-c-new","(maze)","<p>Takes all relevent maze attributes to restructure\n"],["new","MazeSolver","MazeSolver.html#method-c-new","(nodes)","<p>Initialized with the array of nodes from a maze\n"],["new","Node","Node.html#method-c-new","(x, y)","<p>Nodes store their locations, as well as all adjacent nodes, predecessor,\nand a visited boolean\n"],["random_depth_first_search","MazeDesigner","MazeDesigner.html#method-i-random_depth_first_search","(startX, startY, endX, endY)","<p>Performs the random DFS to determine the new maze, backtracking when no way\nforward exists\n"],["redesign","Maze","Maze.html#method-i-redesign","()","<p>Redesigns the maze\n"],["reset_maze","Maze","Maze.html#method-i-reset_maze","()","<p>Resets maze, CHECK IF USED\n"],["solve","Maze","Maze.html#method-i-solve","(begX, begY, endX, endY)","<p>Sends the maze to the solver for solution, returns true if one exists,\nfalse otherwise\n"],["solve","MazeSolver","MazeSolver.html#method-i-solve","(begX, begY, endX, endY)","<p>Solve clears all nodes in case of previous solves, and then uses a BFS to\nindicate if there is a path …\n"],["string_to_maze_array","Maze","Maze.html#method-i-string_to_maze_array","()","<p>Converts the maze_string to a matrix for solving and displaying\n"],["to_s","Node","Node.html#method-i-to_s","()","<p>Used by the maze to display the node, it is a space by default\n"],["trace","Maze","Maze.html#method-i-trace","(begX, begY, endX, endY)","<p>Sends the maze to the solver for a solution, @maze_solver is modified to\nshow solution after\n"],["trace","MazeSolver","MazeSolver.html#method-i-trace","(begX, begY, endX, endY)","<p>Trace runs solve and uses the predecessor attribute of each node to\nbacktrace the path if there is one …\n"],["visit","Node","Node.html#method-i-visit","(predecessor)","<p>A visit by the predecessor updates the predecessor and visited attributes\n"],["README","","README_md.html","",""]]}}